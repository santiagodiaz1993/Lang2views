#!/usr/bin/env python
# coding=utf-8

# what functions are the most important right now?
# 1. Create the scripts
# 2. Auto translate the script
# 2. Edit script (time )

# so we want to create a video object that contains:
# 1. The video
# 2. The audio
# 3. The script
# 4. The title
# 5. The description
# 6. The voice over
# 7. The number of voices


# what do we have to do to create the video object
# 1. Download the video
# 2. Download the script


from youtube_transcript_api import YouTubeTranscriptApi
from pytube import YouTube

import pytube

link = "https://www.youtube.com/watch?v=mpjREfvZiDs"
yt = pytube.YouTube(link)
stream = yt.streams.first()
stream.download("~/Documents/lang2views_project/videos")


class Video:
    def __init__(self):
        link = "https://www.youtube.com/watch?v=K7BVDfXdgOY&t=474s&ab_channel=KurtCaz"
        SAVE_PATH = "/videos"  # to_do
        yt = YouTube(link)
        print(type(yt.filter))

        # filters out all the files with "mp4" extension
        mp4files = yt.filter("mp4")

        # to set the name of the file
        yt.set_filename("GeeksforGeeks Video")

        # get the video with the extension and
        # resolution passed in the get() function
        d_video = yt.get(mp4files[-1].extension, mp4files[-1].resolution)
        try:
            # downloading the video
            d_video.download(SAVE_PATH)
        except:
            print("Some Error!")
        print("Task Completed!")

        # how to get the script
        YouTubeTranscriptApi.get_transcript(video_id)

        # how to know what scripts languages are avaliable
        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)

        # how to get the description
        self.description = yt.description

        # how to get the title
        self.title = yt.title

        # we need a function that creates the scenes
        # for this we need to go word by word and see the exact time at which
        # each word is recorded. For this we can make a dictionary with the
        # list of words and their time. Then look for the gaps and make the
        # scenes every 20-30 seconds. The time range can be a setting
        #


# kurts_video = Video()
